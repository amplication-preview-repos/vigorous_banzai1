/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubscriptionLevel as PrismaSubscriptionLevel,
  Subscription as PrismaSubscription,
  Video as PrismaVideo,
} from "@prisma/client";

export class SubscriptionLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubscriptionLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subscriptionLevel.count(args);
  }

  async subscriptionLevels<T extends Prisma.SubscriptionLevelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionLevelFindManyArgs>
  ): Promise<PrismaSubscriptionLevel[]> {
    return this.prisma.subscriptionLevel.findMany<Prisma.SubscriptionLevelFindManyArgs>(
      args
    );
  }
  async subscriptionLevel<T extends Prisma.SubscriptionLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionLevelFindUniqueArgs>
  ): Promise<PrismaSubscriptionLevel | null> {
    return this.prisma.subscriptionLevel.findUnique(args);
  }
  async createSubscriptionLevel<T extends Prisma.SubscriptionLevelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionLevelCreateArgs>
  ): Promise<PrismaSubscriptionLevel> {
    return this.prisma.subscriptionLevel.create<T>(args);
  }
  async updateSubscriptionLevel<T extends Prisma.SubscriptionLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionLevelUpdateArgs>
  ): Promise<PrismaSubscriptionLevel> {
    return this.prisma.subscriptionLevel.update<T>(args);
  }
  async deleteSubscriptionLevel<T extends Prisma.SubscriptionLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubscriptionLevelDeleteArgs>
  ): Promise<PrismaSubscriptionLevel> {
    return this.prisma.subscriptionLevel.delete(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.subscriptionLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }

  async findVideos(
    parentId: string,
    args: Prisma.VideoFindManyArgs
  ): Promise<PrismaVideo[]> {
    return this.prisma.subscriptionLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .videos(args);
  }
}
