/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubscriptionLevelService } from "../subscriptionLevel.service";
import { SubscriptionLevelCreateInput } from "./SubscriptionLevelCreateInput";
import { SubscriptionLevel } from "./SubscriptionLevel";
import { SubscriptionLevelFindManyArgs } from "./SubscriptionLevelFindManyArgs";
import { SubscriptionLevelWhereUniqueInput } from "./SubscriptionLevelWhereUniqueInput";
import { SubscriptionLevelUpdateInput } from "./SubscriptionLevelUpdateInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { VideoWhereUniqueInput } from "../../video/base/VideoWhereUniqueInput";

export class SubscriptionLevelControllerBase {
  constructor(protected readonly service: SubscriptionLevelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubscriptionLevel })
  async createSubscriptionLevel(
    @common.Body() data: SubscriptionLevelCreateInput
  ): Promise<SubscriptionLevel> {
    return await this.service.createSubscriptionLevel({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubscriptionLevel] })
  @ApiNestedQuery(SubscriptionLevelFindManyArgs)
  async subscriptionLevels(
    @common.Req() request: Request
  ): Promise<SubscriptionLevel[]> {
    const args = plainToClass(SubscriptionLevelFindManyArgs, request.query);
    return this.service.subscriptionLevels({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subscriptionLevel(
    @common.Param() params: SubscriptionLevelWhereUniqueInput
  ): Promise<SubscriptionLevel | null> {
    const result = await this.service.subscriptionLevel({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubscriptionLevel(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() data: SubscriptionLevelUpdateInput
  ): Promise<SubscriptionLevel | null> {
    try {
      return await this.service.updateSubscriptionLevel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubscriptionLevel(
    @common.Param() params: SubscriptionLevelWhereUniqueInput
  ): Promise<SubscriptionLevel | null> {
    try {
      return await this.service.deleteSubscriptionLevel({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: SubscriptionLevelWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,

        subscriptionLevel: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  async connectSubscriptions(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  async updateSubscriptions(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  async disconnectSubscriptions(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/videos")
  @ApiNestedQuery(VideoFindManyArgs)
  async findVideos(
    @common.Req() request: Request,
    @common.Param() params: SubscriptionLevelWhereUniqueInput
  ): Promise<Video[]> {
    const query = plainToClass(VideoFindManyArgs, request.query);
    const results = await this.service.findVideos(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        id: true,

        subscriptionLevel: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videos")
  async connectVideos(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        connect: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videos")
  async updateVideos(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        set: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videos")
  async disconnectVideos(
    @common.Param() params: SubscriptionLevelWhereUniqueInput,
    @common.Body() body: VideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videos: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriptionLevel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
