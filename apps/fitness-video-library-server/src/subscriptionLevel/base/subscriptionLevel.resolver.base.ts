/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SubscriptionLevel } from "./SubscriptionLevel";
import { SubscriptionLevelCountArgs } from "./SubscriptionLevelCountArgs";
import { SubscriptionLevelFindManyArgs } from "./SubscriptionLevelFindManyArgs";
import { SubscriptionLevelFindUniqueArgs } from "./SubscriptionLevelFindUniqueArgs";
import { CreateSubscriptionLevelArgs } from "./CreateSubscriptionLevelArgs";
import { UpdateSubscriptionLevelArgs } from "./UpdateSubscriptionLevelArgs";
import { DeleteSubscriptionLevelArgs } from "./DeleteSubscriptionLevelArgs";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { VideoFindManyArgs } from "../../video/base/VideoFindManyArgs";
import { Video } from "../../video/base/Video";
import { SubscriptionLevelService } from "../subscriptionLevel.service";
@graphql.Resolver(() => SubscriptionLevel)
export class SubscriptionLevelResolverBase {
  constructor(protected readonly service: SubscriptionLevelService) {}

  async _subscriptionLevelsMeta(
    @graphql.Args() args: SubscriptionLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SubscriptionLevel])
  async subscriptionLevels(
    @graphql.Args() args: SubscriptionLevelFindManyArgs
  ): Promise<SubscriptionLevel[]> {
    return this.service.subscriptionLevels(args);
  }

  @graphql.Query(() => SubscriptionLevel, { nullable: true })
  async subscriptionLevel(
    @graphql.Args() args: SubscriptionLevelFindUniqueArgs
  ): Promise<SubscriptionLevel | null> {
    const result = await this.service.subscriptionLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SubscriptionLevel)
  async createSubscriptionLevel(
    @graphql.Args() args: CreateSubscriptionLevelArgs
  ): Promise<SubscriptionLevel> {
    return await this.service.createSubscriptionLevel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SubscriptionLevel)
  async updateSubscriptionLevel(
    @graphql.Args() args: UpdateSubscriptionLevelArgs
  ): Promise<SubscriptionLevel | null> {
    try {
      return await this.service.updateSubscriptionLevel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubscriptionLevel)
  async deleteSubscriptionLevel(
    @graphql.Args() args: DeleteSubscriptionLevelArgs
  ): Promise<SubscriptionLevel | null> {
    try {
      return await this.service.deleteSubscriptionLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  async findSubscriptions(
    @graphql.Parent() parent: SubscriptionLevel,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Video], { name: "videos" })
  async findVideos(
    @graphql.Parent() parent: SubscriptionLevel,
    @graphql.Args() args: VideoFindManyArgs
  ): Promise<Video[]> {
    const results = await this.service.findVideos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
